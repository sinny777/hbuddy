paths:
  /ApplicationCredentials:
    post:
      tags:
        - ApplicationCredential
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ApplicationCredential.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApplicationCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApplicationCredential'
      deprecated: false
    patch:
      tags:
        - ApplicationCredential
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: ApplicationCredential.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApplicationCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApplicationCredential'
      deprecated: false
    put:
      tags:
        - ApplicationCredential
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: ApplicationCredential.replaceOrCreate__put_ApplicationCredentials
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApplicationCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApplicationCredential'
      deprecated: false
    get:
      tags:
        - ApplicationCredential
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ApplicationCredential.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ApplicationCredential'
      deprecated: false
  /ApplicationCredentials/replaceOrCreate:
    post:
      tags:
        - ApplicationCredential
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: >-
        ApplicationCredential.replaceOrCreate__post_ApplicationCredentials_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApplicationCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApplicationCredential'
      deprecated: false
  /ApplicationCredentials/upsertWithWhere:
    post:
      tags:
        - ApplicationCredential
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: ApplicationCredential.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ApplicationCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApplicationCredential'
      deprecated: false
  '/ApplicationCredentials/{id}/exists':
    get:
      tags:
        - ApplicationCredential
      summary: Check whether a model instance exists in the data source.
      operationId: 'ApplicationCredential.exists__get_ApplicationCredentials_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ApplicationCredentials/{id}':
    head:
      tags:
        - ApplicationCredential
      summary: Check whether a model instance exists in the data source.
      operationId: 'ApplicationCredential.exists__head_ApplicationCredentials_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ApplicationCredential
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ApplicationCredential.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApplicationCredential'
      deprecated: false
    put:
      tags:
        - ApplicationCredential
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'ApplicationCredential.replaceById__put_ApplicationCredentials_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApplicationCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApplicationCredential'
      deprecated: false
    delete:
      tags:
        - ApplicationCredential
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ApplicationCredential.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ApplicationCredential
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: ApplicationCredential.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ApplicationCredential'
        - name: id
          in: path
          description: ApplicationCredential id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApplicationCredential'
      deprecated: false
  '/ApplicationCredentials/{id}/replace':
    post:
      tags:
        - ApplicationCredential
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: >-
        ApplicationCredential.replaceById__post_ApplicationCredentials_{id}_replace
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ApplicationCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApplicationCredential'
      deprecated: false
  /ApplicationCredentials/findOne:
    get:
      tags:
        - ApplicationCredential
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ApplicationCredential.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ApplicationCredential'
      deprecated: false
  /ApplicationCredentials/update:
    post:
      tags:
        - ApplicationCredential
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ApplicationCredential.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ApplicationCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ApplicationCredentials/count:
    get:
      tags:
        - ApplicationCredential
      summary: Count instances of the model matched by where from the data source.
      operationId: ApplicationCredential.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/UserCredentials/{id}/user':
    get:
      tags:
        - UserCredential
      summary: Fetches belongsTo relation user.
      operationId: UserCredential.prototype.__get__user
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: UserCredential id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /UserCredentials:
    post:
      tags:
        - UserCredential
      summary: Create a new instance of the model and persist it into the data source.
      operationId: UserCredential.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    patch:
      tags:
        - UserCredential
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: UserCredential.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    put:
      tags:
        - UserCredential
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UserCredential.replaceOrCreate__put_UserCredentials
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    get:
      tags:
        - UserCredential
      summary: Find all instances of the model matched by filter from the data source.
      operationId: UserCredential.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserCredential'
      deprecated: false
  /UserCredentials/replaceOrCreate:
    post:
      tags:
        - UserCredential
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UserCredential.replaceOrCreate__post_UserCredentials_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
  /UserCredentials/upsertWithWhere:
    post:
      tags:
        - UserCredential
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: UserCredential.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
  '/UserCredentials/{id}/exists':
    get:
      tags:
        - UserCredential
      summary: Check whether a model instance exists in the data source.
      operationId: 'UserCredential.exists__get_UserCredentials_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/UserCredentials/{id}':
    head:
      tags:
        - UserCredential
      summary: Check whether a model instance exists in the data source.
      operationId: 'UserCredential.exists__head_UserCredentials_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - UserCredential
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: UserCredential.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    put:
      tags:
        - UserCredential
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UserCredential.replaceById__put_UserCredentials_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    delete:
      tags:
        - UserCredential
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: UserCredential.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - UserCredential
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: UserCredential.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserCredential'
        - name: id
          in: path
          description: UserCredential id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
  '/UserCredentials/{id}/replace':
    post:
      tags:
        - UserCredential
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UserCredential.replaceById__post_UserCredentials_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
  /UserCredentials/findOne:
    get:
      tags:
        - UserCredential
      summary: Find first instance of the model matched by filter from the data source.
      operationId: UserCredential.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
  /UserCredentials/update:
    post:
      tags:
        - UserCredential
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: UserCredential.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /UserCredentials/count:
    get:
      tags:
        - UserCredential
      summary: Count instances of the model matched by where from the data source.
      operationId: UserCredential.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/UserIdentities/{id}/user':
    get:
      tags:
        - MyUserIdentity
      summary: Fetches belongsTo relation user.
      operationId: MyUserIdentity.prototype.__get__user
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: MyUserIdentity id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /UserIdentities:
    post:
      tags:
        - MyUserIdentity
      summary: Create a new instance of the model and persist it into the data source.
      operationId: MyUserIdentity.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUserIdentity'
      deprecated: false
    patch:
      tags:
        - MyUserIdentity
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: MyUserIdentity.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUserIdentity'
      deprecated: false
    put:
      tags:
        - MyUserIdentity
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: MyUserIdentity.replaceOrCreate__put_UserIdentities
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUserIdentity'
      deprecated: false
    get:
      tags:
        - MyUserIdentity
      summary: Find all instances of the model matched by filter from the data source.
      operationId: MyUserIdentity.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MyUserIdentity'
      deprecated: false
  /UserIdentities/replaceOrCreate:
    post:
      tags:
        - MyUserIdentity
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: MyUserIdentity.replaceOrCreate__post_UserIdentities_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUserIdentity'
      deprecated: false
  /UserIdentities/upsertWithWhere:
    post:
      tags:
        - MyUserIdentity
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: MyUserIdentity.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MyUserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUserIdentity'
      deprecated: false
  '/UserIdentities/{id}/exists':
    get:
      tags:
        - MyUserIdentity
      summary: Check whether a model instance exists in the data source.
      operationId: 'MyUserIdentity.exists__get_UserIdentities_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/UserIdentities/{id}':
    head:
      tags:
        - MyUserIdentity
      summary: Check whether a model instance exists in the data source.
      operationId: 'MyUserIdentity.exists__head_UserIdentities_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - MyUserIdentity
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: MyUserIdentity.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUserIdentity'
      deprecated: false
    put:
      tags:
        - MyUserIdentity
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'MyUserIdentity.replaceById__put_UserIdentities_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUserIdentity'
      deprecated: false
    delete:
      tags:
        - MyUserIdentity
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: MyUserIdentity.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - MyUserIdentity
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: MyUserIdentity.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MyUserIdentity'
        - name: id
          in: path
          description: MyUserIdentity id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUserIdentity'
      deprecated: false
  '/UserIdentities/{id}/replace':
    post:
      tags:
        - MyUserIdentity
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'MyUserIdentity.replaceById__post_UserIdentities_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUserIdentity'
      deprecated: false
  /UserIdentities/findOne:
    get:
      tags:
        - MyUserIdentity
      summary: Find first instance of the model matched by filter from the data source.
      operationId: MyUserIdentity.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUserIdentity'
      deprecated: false
  /UserIdentities/update:
    post:
      tags:
        - MyUserIdentity
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: MyUserIdentity.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MyUserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /UserIdentities/count:
    get:
      tags:
        - MyUserIdentity
      summary: Count instances of the model matched by where from the data source.
      operationId: MyUserIdentity.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/MyUsers/{id}/identities':
    get:
      tags:
        - MyUser
      summary: Fetches hasOne relation identities.
      operationId: MyUser.prototype.__get__identities
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUserIdentity'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in identities of this model.
      operationId: MyUser.prototype.__create__identities
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MyUserIdentity'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUserIdentity'
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update identities of this model.
      operationId: MyUser.prototype.__update__identities
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/MyUserIdentity'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUserIdentity'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes identities of this model.
      operationId: MyUser.prototype.__destroy__identities
      parameters:
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/credentials/{fk}':
    get:
      tags:
        - MyUser
      summary: Find a related item by id for credentials.
      operationId: MyUser.prototype.__findById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Delete a related item by id for credentials.
      operationId: MyUser.prototype.__destroyById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update a related item by id for credentials.
      operationId: MyUser.prototype.__updateById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserCredential'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
  '/MyUsers/{id}/accessTokens/{fk}':
    get:
      tags:
        - MyUser
      summary: Find a related item by id for accessTokens.
      operationId: MyUser.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CustomAccessToken'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Delete a related item by id for accessTokens.
      operationId: MyUser.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update a related item by id for accessTokens.
      operationId: MyUser.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/CustomAccessToken'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CustomAccessToken'
      deprecated: false
  '/MyUsers/{id}/roles/{fk}':
    get:
      tags:
        - MyUser
      summary: Find a related item by id for roles.
      operationId: MyUser.prototype.__findById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Delete a related item by id for roles.
      operationId: MyUser.prototype.__destroyById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update a related item by id for roles.
      operationId: MyUser.prototype.__updateById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Role'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  '/MyUsers/{id}/roles/rel/{fk}':
    put:
      tags:
        - MyUser
      summary: Add a related item by id for roles.
      operationId: MyUser.prototype.__link__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Remove the roles relation to an item by id.
      operationId: MyUser.prototype.__unlink__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - MyUser
      summary: Check the existence of roles relation to an item by id.
      operationId: MyUser.prototype.__exists__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/MyUsers/{id}/credentials':
    get:
      tags:
        - MyUser
      summary: Queries credentials of MyUser.
      operationId: MyUser.prototype.__get__credentials
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserCredential'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in credentials of this model.
      operationId: MyUser.prototype.__create__credentials
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserCredential'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes all credentials of this model.
      operationId: MyUser.prototype.__delete__credentials
      parameters:
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/credentials/count':
    get:
      tags:
        - MyUser
      summary: Counts credentials of MyUser.
      operationId: MyUser.prototype.__count__credentials
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/MyUsers/{id}/accessTokens':
    get:
      tags:
        - MyUser
      summary: Queries accessTokens of MyUser.
      operationId: MyUser.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/CustomAccessToken'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in accessTokens of this model.
      operationId: MyUser.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/CustomAccessToken'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CustomAccessToken'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes all accessTokens of this model.
      operationId: MyUser.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/accessTokens/count':
    get:
      tags:
        - MyUser
      summary: Counts accessTokens of MyUser.
      operationId: MyUser.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/MyUsers/{id}/roles':
    get:
      tags:
        - MyUser
      summary: Queries roles of MyUser.
      operationId: MyUser.prototype.__get__roles
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in roles of this model.
      operationId: MyUser.prototype.__create__roles
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Role'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes all roles of this model.
      operationId: MyUser.prototype.__delete__roles
      parameters:
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/roles/count':
    get:
      tags:
        - MyUser
      summary: Counts roles of MyUser.
      operationId: MyUser.prototype.__count__roles
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /MyUsers:
    post:
      tags:
        - MyUser
      summary: Create a new instance of the model and persist it into the data source.
      operationId: MyUser.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    patch:
      tags:
        - MyUser
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: MyUser.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    put:
      tags:
        - MyUser
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: MyUser.replaceOrCreate__put_MyUsers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    get:
      tags:
        - MyUser
      summary: Find all instances of the model matched by filter from the data source.
      operationId: MyUser.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MyUser'
      deprecated: false
  /MyUsers/replaceOrCreate:
    post:
      tags:
        - MyUser
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: MyUser.replaceOrCreate__post_MyUsers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /MyUsers/upsertWithWhere:
    post:
      tags:
        - MyUser
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: MyUser.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  '/MyUsers/{id}/exists':
    get:
      tags:
        - MyUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'MyUser.exists__get_MyUsers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/MyUsers/{id}':
    head:
      tags:
        - MyUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'MyUser.exists__head_MyUsers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - MyUser
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: MyUser.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    put:
      tags:
        - MyUser
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'MyUser.replaceById__put_MyUsers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: MyUser.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - MyUser
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: MyUser.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MyUser'
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  '/MyUsers/{id}/replace':
    post:
      tags:
        - MyUser
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'MyUser.replaceById__post_MyUsers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /MyUsers/findOne:
    get:
      tags:
        - MyUser
      summary: Find first instance of the model matched by filter from the data source.
      operationId: MyUser.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /MyUsers/update:
    post:
      tags:
        - MyUser
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: MyUser.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /MyUsers/count:
    get:
      tags:
        - MyUser
      summary: Count instances of the model matched by where from the data source.
      operationId: MyUser.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /MyUsers/login:
    post:
      tags:
        - MyUser
      summary: Login a user with username/email and password.
      operationId: MyUser.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)






            type: object
      deprecated: false
  /MyUsers/logout:
    post:
      tags:
        - MyUser
      summary: Logout a user with access token.
      operationId: MyUser.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/verify':
    post:
      tags:
        - MyUser
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: MyUser.prototype.verify
      parameters:
        - name: id
          in: path
          description: MyUser id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/confirm:
    get:
      tags:
        - MyUser
      summary: Confirm a user registration with identity verification token.
      operationId: MyUser.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/reset:
    post:
      tags:
        - MyUser
      summary: Reset password for a user with email.
      operationId: MyUser.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/change-password:
    post:
      tags:
        - MyUser
      summary: Change a user's password.
      operationId: MyUser.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/reset-password:
    post:
      tags:
        - MyUser
      summary: Reset user's password via a password-reset token.
      operationId: MyUser.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/authenticate:
    get:
      tags:
        - MyUser
      operationId: MyUser.authenticate
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/authenticated:
    get:
      tags:
        - MyUser
      operationId: MyUser.authenticated
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/authentication/failed:
    get:
      tags:
        - MyUser
      operationId: MyUser.failedAuthentication
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/RoleMappings/{id}/role':
    get:
      tags:
        - RoleMapping
      summary: Fetches belongsTo relation role.
      operationId: RoleMapping.prototype.__get__role
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: RoleMapping id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /RoleMappings:
    post:
      tags:
        - RoleMapping
      summary: Create a new instance of the model and persist it into the data source.
      operationId: RoleMapping.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    patch:
      tags:
        - RoleMapping
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: RoleMapping.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    put:
      tags:
        - RoleMapping
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: RoleMapping.replaceOrCreate__put_RoleMappings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    get:
      tags:
        - RoleMapping
      summary: Find all instances of the model matched by filter from the data source.
      operationId: RoleMapping.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/RoleMapping'
      deprecated: false
  /RoleMappings/replaceOrCreate:
    post:
      tags:
        - RoleMapping
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: RoleMapping.replaceOrCreate__post_RoleMappings_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  /RoleMappings/upsertWithWhere:
    post:
      tags:
        - RoleMapping
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: RoleMapping.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  '/RoleMappings/{id}/exists':
    get:
      tags:
        - RoleMapping
      summary: Check whether a model instance exists in the data source.
      operationId: 'RoleMapping.exists__get_RoleMappings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/RoleMappings/{id}':
    head:
      tags:
        - RoleMapping
      summary: Check whether a model instance exists in the data source.
      operationId: 'RoleMapping.exists__head_RoleMappings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - RoleMapping
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: RoleMapping.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    put:
      tags:
        - RoleMapping
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'RoleMapping.replaceById__put_RoleMappings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - RoleMapping
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: RoleMapping.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - RoleMapping
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: RoleMapping.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: RoleMapping id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  '/RoleMappings/{id}/replace':
    post:
      tags:
        - RoleMapping
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'RoleMapping.replaceById__post_RoleMappings_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  /RoleMappings/findOne:
    get:
      tags:
        - RoleMapping
      summary: Find first instance of the model matched by filter from the data source.
      operationId: RoleMapping.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  /RoleMappings/update:
    post:
      tags:
        - RoleMapping
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: RoleMapping.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /RoleMappings/count:
    get:
      tags:
        - RoleMapping
      summary: Count instances of the model matched by where from the data source.
      operationId: RoleMapping.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Roles/{id}/principals/{fk}':
    get:
      tags:
        - Role
      summary: Find a related item by id for principals.
      operationId: Role.prototype.__findById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - Role
      summary: Delete a related item by id for principals.
      operationId: Role.prototype.__destroyById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Role
      summary: Update a related item by id for principals.
      operationId: Role.prototype.__updateById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  '/Roles/{id}/principals':
    get:
      tags:
        - Role
      summary: Queries principals of Role.
      operationId: Role.prototype.__get__principals
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/RoleMapping'
      deprecated: false
    post:
      tags:
        - Role
      summary: Creates a new instance in principals of this model.
      operationId: Role.prototype.__create__principals
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - Role
      summary: Deletes all principals of this model.
      operationId: Role.prototype.__delete__principals
      parameters:
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Roles/{id}/principals/count':
    get:
      tags:
        - Role
      summary: Counts principals of Role.
      operationId: Role.prototype.__count__principals
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Roles:
    post:
      tags:
        - Role
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Role.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    patch:
      tags:
        - Role
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Role.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    put:
      tags:
        - Role
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Role.replaceOrCreate__put_Roles
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    get:
      tags:
        - Role
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Role.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
      deprecated: false
  /Roles/replaceOrCreate:
    post:
      tags:
        - Role
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Role.replaceOrCreate__post_Roles_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /Roles/upsertWithWhere:
    post:
      tags:
        - Role
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Role.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  '/Roles/{id}/exists':
    get:
      tags:
        - Role
      summary: Check whether a model instance exists in the data source.
      operationId: 'Role.exists__get_Roles_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Roles/{id}':
    head:
      tags:
        - Role
      summary: Check whether a model instance exists in the data source.
      operationId: 'Role.exists__head_Roles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Role
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Role.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    put:
      tags:
        - Role
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Role.replaceById__put_Roles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - Role
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Role.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Role
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Role.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Role'
        - name: id
          in: path
          description: Role id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  '/Roles/{id}/replace':
    post:
      tags:
        - Role
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Role.replaceById__post_Roles_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /Roles/findOne:
    get:
      tags:
        - Role
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Role.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /Roles/update:
    post:
      tags:
        - Role
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Role.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Roles/count:
    get:
      tags:
        - Role
      summary: Count instances of the model matched by where from the data source.
      operationId: Role.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Containers:
    get:
      tags:
        - Container
      operationId: Container.getContainers
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
    post:
      tags:
        - Container
      operationId: Container.createContainer
      parameters:
        - name: options
          in: body
          required: false
          schema:
            type: object
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Containers/{container}':
    delete:
      tags:
        - Container
      operationId: Container.destroyContainer
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              undefined:
                type: object
      deprecated: false
    get:
      tags:
        - Container
      operationId: Container.getContainer
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Containers/{container}/files':
    get:
      tags:
        - Container
      operationId: Container.getFiles
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  '/Containers/{container}/files/{file}':
    get:
      tags:
        - Container
      operationId: Container.getFile
      parameters:
        - name: container
          in: path
          required: true
          type: string
        - name: file
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    delete:
      tags:
        - Container
      operationId: Container.removeFile
      parameters:
        - name: container
          in: path
          required: true
          type: string
        - name: file
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              undefined:
                type: object
      deprecated: false
  '/Containers/{container}/upload':
    post:
      tags:
        - Container
      operationId: Container.upload
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: object
      deprecated: false
  '/Containers/{container}/download/{file}':
    get:
      tags:
        - Container
      operationId: Container.download
      parameters:
        - name: container
          in: path
          required: true
          type: string
        - name: file
          in: path
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Places/{id}/owner':
    get:
      tags:
        - Place
      summary: Fetches belongsTo relation owner.
      operationId: Place.prototype.__get__owner
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Place id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  '/Places/{id}/groups/{fk}':
    get:
      tags:
        - Place
      summary: Find a related item by id for groups.
      operationId: Place.prototype.__findById__groups
      parameters:
        - name: fk
          in: path
          description: Foreign key for groups
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Place id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    delete:
      tags:
        - Place
      summary: Delete a related item by id for groups.
      operationId: Place.prototype.__destroyById__groups
      parameters:
        - name: fk
          in: path
          description: Foreign key for groups
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Place id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Place
      summary: Update a related item by id for groups.
      operationId: Place.prototype.__updateById__groups
      parameters:
        - name: fk
          in: path
          description: Foreign key for groups
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Group'
        - name: id
          in: path
          description: Place id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  '/Places/{id}/groups':
    get:
      tags:
        - Place
      summary: Queries groups of Place.
      operationId: Place.prototype.__get__groups
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Place id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
      deprecated: false
    post:
      tags:
        - Place
      summary: Creates a new instance in groups of this model.
      operationId: Place.prototype.__create__groups
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Group'
        - name: id
          in: path
          description: Place id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    delete:
      tags:
        - Place
      summary: Deletes all groups of this model.
      operationId: Place.prototype.__delete__groups
      parameters:
        - name: id
          in: path
          description: Place id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Places/{id}/groups/count':
    get:
      tags:
        - Place
      summary: Counts groups of Place.
      operationId: Place.prototype.__count__groups
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Place id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Places:
    post:
      tags:
        - Place
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Place.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
    patch:
      tags:
        - Place
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Place.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
    put:
      tags:
        - Place
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Place.replaceOrCreate__put_Places
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
    get:
      tags:
        - Place
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Place.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Place'
      deprecated: false
  /Places/replaceOrCreate:
    post:
      tags:
        - Place
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Place.replaceOrCreate__post_Places_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  /Places/upsertWithWhere:
    post:
      tags:
        - Place
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Place.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  '/Places/{id}/exists':
    get:
      tags:
        - Place
      summary: Check whether a model instance exists in the data source.
      operationId: 'Place.exists__get_Places_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Places/{id}':
    head:
      tags:
        - Place
      summary: Check whether a model instance exists in the data source.
      operationId: 'Place.exists__head_Places_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Place
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Place.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
    put:
      tags:
        - Place
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Place.replaceById__put_Places_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
    delete:
      tags:
        - Place
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Place.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Place
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Place.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Place'
        - name: id
          in: path
          description: Place id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  '/Places/{id}/replace':
    post:
      tags:
        - Place
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Place.replaceById__post_Places_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  /Places/findOne:
    get:
      tags:
        - Place
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Place.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  /Places/update:
    post:
      tags:
        - Place
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Place.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Places/count:
    get:
      tags:
        - Place
      summary: Count instances of the model matched by where from the data source.
      operationId: Place.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Places/sensordata:
    post:
      tags:
        - Place
      operationId: Place.sensorData
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              sensordata:
                type: object
      deprecated: false
  /PlaceAreas:
    post:
      tags:
        - PlaceArea
      summary: Create a new instance of the model and persist it into the data source.
      operationId: PlaceArea.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
    patch:
      tags:
        - PlaceArea
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: PlaceArea.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
    put:
      tags:
        - PlaceArea
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: PlaceArea.replaceOrCreate__put_PlaceAreas
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
    get:
      tags:
        - PlaceArea
      summary: Find all instances of the model matched by filter from the data source.
      operationId: PlaceArea.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/PlaceArea'
      deprecated: false
  /PlaceAreas/replaceOrCreate:
    post:
      tags:
        - PlaceArea
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: PlaceArea.replaceOrCreate__post_PlaceAreas_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
  /PlaceAreas/upsertWithWhere:
    post:
      tags:
        - PlaceArea
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: PlaceArea.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
  '/PlaceAreas/{id}/exists':
    get:
      tags:
        - PlaceArea
      summary: Check whether a model instance exists in the data source.
      operationId: 'PlaceArea.exists__get_PlaceAreas_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/PlaceAreas/{id}':
    head:
      tags:
        - PlaceArea
      summary: Check whether a model instance exists in the data source.
      operationId: 'PlaceArea.exists__head_PlaceAreas_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - PlaceArea
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: PlaceArea.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
    put:
      tags:
        - PlaceArea
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'PlaceArea.replaceById__put_PlaceAreas_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
    delete:
      tags:
        - PlaceArea
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: PlaceArea.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - PlaceArea
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: PlaceArea.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PlaceArea'
        - name: id
          in: path
          description: PlaceArea id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
  '/PlaceAreas/{id}/replace':
    post:
      tags:
        - PlaceArea
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'PlaceArea.replaceById__post_PlaceAreas_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
  /PlaceAreas/findOne:
    get:
      tags:
        - PlaceArea
      summary: Find first instance of the model matched by filter from the data source.
      operationId: PlaceArea.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
  /PlaceAreas/update:
    post:
      tags:
        - PlaceArea
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: PlaceArea.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /PlaceAreas/count:
    get:
      tags:
        - PlaceArea
      summary: Count instances of the model matched by where from the data source.
      operationId: PlaceArea.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /PlaceAreas/addboard:
    post:
      tags:
        - PlaceArea
      operationId: PlaceArea.addBoard
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              board:
                type: object
      deprecated: false
  /Boards:
    post:
      tags:
        - Board
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Board.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
    patch:
      tags:
        - Board
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Board.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
    put:
      tags:
        - Board
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Board.replaceOrCreate__put_Boards
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
    get:
      tags:
        - Board
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Board.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Board'
      deprecated: false
  /Boards/replaceOrCreate:
    post:
      tags:
        - Board
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Board.replaceOrCreate__post_Boards_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
  /Boards/upsertWithWhere:
    post:
      tags:
        - Board
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Board.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
  '/Boards/{id}/exists':
    get:
      tags:
        - Board
      summary: Check whether a model instance exists in the data source.
      operationId: 'Board.exists__get_Boards_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Boards/{id}':
    head:
      tags:
        - Board
      summary: Check whether a model instance exists in the data source.
      operationId: 'Board.exists__head_Boards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Board
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Board.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
    put:
      tags:
        - Board
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Board.replaceById__put_Boards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
    delete:
      tags:
        - Board
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Board.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Board
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Board.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Board'
        - name: id
          in: path
          description: Board id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
  '/Boards/{id}/replace':
    post:
      tags:
        - Board
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Board.replaceById__post_Boards_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
  /Boards/findOne:
    get:
      tags:
        - Board
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Board.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
  /Boards/update:
    post:
      tags:
        - Board
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Board.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Boards/count:
    get:
      tags:
        - Board
      summary: Count instances of the model matched by where from the data source.
      operationId: Board.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Boards/devicechange:
    post:
      tags:
        - Board
      operationId: Board.deviceChangeTrigger
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Boards/sensordata:
    post:
      tags:
        - Board
      operationId: Board.sensorDataTrigger
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Groups/{id}/owner':
    get:
      tags:
        - Group
      summary: Fetches belongsTo relation owner.
      operationId: Group.prototype.__get__owner
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  '/Groups/{id}/place':
    get:
      tags:
        - Group
      summary: Fetches belongsTo relation place.
      operationId: Group.prototype.__get__place
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  /Groups:
    post:
      tags:
        - Group
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Group.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    patch:
      tags:
        - Group
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Group.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    put:
      tags:
        - Group
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Group.replaceOrCreate__put_Groups
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    get:
      tags:
        - Group
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Group.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
      deprecated: false
  /Groups/replaceOrCreate:
    post:
      tags:
        - Group
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Group.replaceOrCreate__post_Groups_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  /Groups/upsertWithWhere:
    post:
      tags:
        - Group
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Group.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  '/Groups/{id}/exists':
    get:
      tags:
        - Group
      summary: Check whether a model instance exists in the data source.
      operationId: 'Group.exists__get_Groups_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Groups/{id}':
    head:
      tags:
        - Group
      summary: Check whether a model instance exists in the data source.
      operationId: 'Group.exists__head_Groups_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Group
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Group.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    put:
      tags:
        - Group
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Group.replaceById__put_Groups_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    delete:
      tags:
        - Group
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Group.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Group
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Group.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Group'
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  '/Groups/{id}/replace':
    post:
      tags:
        - Group
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Group.replaceById__post_Groups_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  /Groups/findOne:
    get:
      tags:
        - Group
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Group.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  /Groups/update:
    post:
      tags:
        - Group
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Group.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Groups/count:
    get:
      tags:
        - Group
      summary: Count instances of the model matched by where from the data source.
      operationId: Group.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Configurations:
    post:
      tags:
        - Configuration
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Configuration.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    patch:
      tags:
        - Configuration
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Configuration.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    put:
      tags:
        - Configuration
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Configuration.replaceOrCreate__put_Configurations
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    get:
      tags:
        - Configuration
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Configuration.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Configuration'
      deprecated: false
  /Configurations/replaceOrCreate:
    post:
      tags:
        - Configuration
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Configuration.replaceOrCreate__post_Configurations_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  /Configurations/upsertWithWhere:
    post:
      tags:
        - Configuration
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Configuration.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  '/Configurations/{id}/exists':
    get:
      tags:
        - Configuration
      summary: Check whether a model instance exists in the data source.
      operationId: 'Configuration.exists__get_Configurations_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Configurations/{id}':
    head:
      tags:
        - Configuration
      summary: Check whether a model instance exists in the data source.
      operationId: 'Configuration.exists__head_Configurations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Configuration
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Configuration.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    put:
      tags:
        - Configuration
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Configuration.replaceById__put_Configurations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    delete:
      tags:
        - Configuration
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Configuration.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Configuration
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Configuration.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Configuration'
        - name: id
          in: path
          description: Configuration id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  '/Configurations/{id}/replace':
    post:
      tags:
        - Configuration
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Configuration.replaceById__post_Configurations_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  /Configurations/findOne:
    get:
      tags:
        - Configuration
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Configuration.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  /Configurations/update:
    post:
      tags:
        - Configuration
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Configuration.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Configurations/count:
    get:
      tags:
        - Configuration
      summary: Count instances of the model matched by where from the data source.
      operationId: Configuration.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Scenes:
    post:
      tags:
        - Scene
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Scene.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
    patch:
      tags:
        - Scene
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Scene.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
    put:
      tags:
        - Scene
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Scene.replaceOrCreate__put_Scenes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
    get:
      tags:
        - Scene
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Scene.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Scene'
      deprecated: false
  /Scenes/replaceOrCreate:
    post:
      tags:
        - Scene
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Scene.replaceOrCreate__post_Scenes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
  /Scenes/upsertWithWhere:
    post:
      tags:
        - Scene
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Scene.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
  '/Scenes/{id}/exists':
    get:
      tags:
        - Scene
      summary: Check whether a model instance exists in the data source.
      operationId: 'Scene.exists__get_Scenes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Scenes/{id}':
    head:
      tags:
        - Scene
      summary: Check whether a model instance exists in the data source.
      operationId: 'Scene.exists__head_Scenes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Scene
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Scene.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
    put:
      tags:
        - Scene
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Scene.replaceById__put_Scenes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
    delete:
      tags:
        - Scene
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Scene.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Scene
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Scene.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Scene'
        - name: id
          in: path
          description: Scene id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
  '/Scenes/{id}/replace':
    post:
      tags:
        - Scene
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Scene.replaceById__post_Scenes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
  /Scenes/findOne:
    get:
      tags:
        - Scene
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Scene.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
  /Scenes/update:
    post:
      tags:
        - Scene
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Scene.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Scenes/count:
    get:
      tags:
        - Scene
      summary: Count instances of the model matched by where from the data source.
      operationId: Scene.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /UserSettings:
    post:
      tags:
        - UserSetting
      summary: Create a new instance of the model and persist it into the data source.
      operationId: UserSetting.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    patch:
      tags:
        - UserSetting
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: UserSetting.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    put:
      tags:
        - UserSetting
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UserSetting.replaceOrCreate__put_UserSettings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    get:
      tags:
        - UserSetting
      summary: Find all instances of the model matched by filter from the data source.
      operationId: UserSetting.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSetting'
      deprecated: false
  /UserSettings/replaceOrCreate:
    post:
      tags:
        - UserSetting
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UserSetting.replaceOrCreate__post_UserSettings_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  /UserSettings/upsertWithWhere:
    post:
      tags:
        - UserSetting
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: UserSetting.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  '/UserSettings/{id}/exists':
    get:
      tags:
        - UserSetting
      summary: Check whether a model instance exists in the data source.
      operationId: 'UserSetting.exists__get_UserSettings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/UserSettings/{id}':
    head:
      tags:
        - UserSetting
      summary: Check whether a model instance exists in the data source.
      operationId: 'UserSetting.exists__head_UserSettings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - UserSetting
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: UserSetting.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    put:
      tags:
        - UserSetting
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UserSetting.replaceById__put_UserSettings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    delete:
      tags:
        - UserSetting
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: UserSetting.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - UserSetting
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: UserSetting.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserSetting'
        - name: id
          in: path
          description: UserSetting id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  '/UserSettings/{id}/replace':
    post:
      tags:
        - UserSetting
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UserSetting.replaceById__post_UserSettings_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  /UserSettings/findOne:
    get:
      tags:
        - UserSetting
      summary: Find first instance of the model matched by filter from the data source.
      operationId: UserSetting.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  /UserSettings/update:
    post:
      tags:
        - UserSetting
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: UserSetting.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /UserSettings/count:
    get:
      tags:
        - UserSetting
      summary: Count instances of the model matched by where from the data source.
      operationId: UserSetting.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Notifications:
    post:
      tags:
        - Notification
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Notification.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    patch:
      tags:
        - Notification
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Notification.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    put:
      tags:
        - Notification
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Notification.replaceOrCreate__put_Notifications
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    get:
      tags:
        - Notification
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Notification.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Notification'
      deprecated: false
  /Notifications/replaceOrCreate:
    post:
      tags:
        - Notification
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Notification.replaceOrCreate__post_Notifications_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  /Notifications/upsertWithWhere:
    post:
      tags:
        - Notification
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Notification.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  '/Notifications/{id}/exists':
    get:
      tags:
        - Notification
      summary: Check whether a model instance exists in the data source.
      operationId: 'Notification.exists__get_Notifications_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Notifications/{id}':
    head:
      tags:
        - Notification
      summary: Check whether a model instance exists in the data source.
      operationId: 'Notification.exists__head_Notifications_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Notification
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Notification.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    put:
      tags:
        - Notification
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Notification.replaceById__put_Notifications_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    delete:
      tags:
        - Notification
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Notification.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Notification
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Notification.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Notification'
        - name: id
          in: path
          description: Notification id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  '/Notifications/{id}/replace':
    post:
      tags:
        - Notification
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Notification.replaceById__post_Notifications_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  /Notifications/findOne:
    get:
      tags:
        - Notification
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Notification.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  /Notifications/update:
    post:
      tags:
        - Notification
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Notification.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Notifications/count:
    get:
      tags:
        - Notification
      summary: Count instances of the model matched by where from the data source.
      operationId: Notification.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Notifications/notify:
    post:
      tags:
        - Notification
      operationId: Notification.notify
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /Notifications/email:
    post:
      tags:
        - Notification
      operationId: Notification.sendEmail
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /Notifications/trigger:
    post:
      tags:
        - Notification
      operationId: Notification.eventTriggered
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /Devices:
    post:
      tags:
        - Device
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Device.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
    patch:
      tags:
        - Device
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Device.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
    put:
      tags:
        - Device
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Device.replaceOrCreate__put_Devices
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
    get:
      tags:
        - Device
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Device.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Device'
      deprecated: false
  /Devices/replaceOrCreate:
    post:
      tags:
        - Device
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Device.replaceOrCreate__post_Devices_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
  /Devices/upsertWithWhere:
    post:
      tags:
        - Device
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Device.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
  '/Devices/{id}/exists':
    get:
      tags:
        - Device
      summary: Check whether a model instance exists in the data source.
      operationId: 'Device.exists__get_Devices_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Devices/{id}':
    head:
      tags:
        - Device
      summary: Check whether a model instance exists in the data source.
      operationId: 'Device.exists__head_Devices_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Device
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Device.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
    put:
      tags:
        - Device
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Device.replaceById__put_Devices_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
    delete:
      tags:
        - Device
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Device.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Device
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Device.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Device'
        - name: id
          in: path
          description: Device id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
  '/Devices/{id}/replace':
    post:
      tags:
        - Device
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Device.replaceById__post_Devices_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
  /Devices/findOne:
    get:
      tags:
        - Device
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Device.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
  /Devices/update:
    post:
      tags:
        - Device
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Device.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Devices/count:
    get:
      tags:
        - Device
      summary: Count instances of the model matched by where from the data source.
      operationId: Device.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Conversations:
    get:
      tags:
        - Conversation
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Conversation.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Conversation'
      deprecated: false
    post:
      tags:
        - Conversation
      operationId: Conversation.doconversation
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              conversation:
                type: object
      deprecated: false
  /Mappings:
    post:
      tags:
        - Mapping
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Mapping.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Mapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mapping'
      deprecated: false
    patch:
      tags:
        - Mapping
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Mapping.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Mapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mapping'
      deprecated: false
    put:
      tags:
        - Mapping
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Mapping.replaceOrCreate__put_Mappings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Mapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mapping'
      deprecated: false
    get:
      tags:
        - Mapping
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Mapping.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Mapping'
      deprecated: false
  /Mappings/replaceOrCreate:
    post:
      tags:
        - Mapping
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Mapping.replaceOrCreate__post_Mappings_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Mapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mapping'
      deprecated: false
  /Mappings/upsertWithWhere:
    post:
      tags:
        - Mapping
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Mapping.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Mapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mapping'
      deprecated: false
  '/Mappings/{id}/exists':
    get:
      tags:
        - Mapping
      summary: Check whether a model instance exists in the data source.
      operationId: 'Mapping.exists__get_Mappings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Mappings/{id}':
    head:
      tags:
        - Mapping
      summary: Check whether a model instance exists in the data source.
      operationId: 'Mapping.exists__head_Mappings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Mapping
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Mapping.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mapping'
      deprecated: false
    put:
      tags:
        - Mapping
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Mapping.replaceById__put_Mappings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Mapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mapping'
      deprecated: false
    delete:
      tags:
        - Mapping
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Mapping.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Mapping
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Mapping.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Mapping'
        - name: id
          in: path
          description: Mapping id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mapping'
      deprecated: false
  '/Mappings/{id}/replace':
    post:
      tags:
        - Mapping
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Mapping.replaceById__post_Mappings_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Mapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mapping'
      deprecated: false
  /Mappings/findOne:
    get:
      tags:
        - Mapping
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Mapping.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mapping'
      deprecated: false
  /Mappings/update:
    post:
      tags:
        - Mapping
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Mapping.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Mapping'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Mappings/count:
    get:
      tags:
        - Mapping
      summary: Count instances of the model matched by where from the data source.
      operationId: Mapping.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  ApplicationCredential:
    properties:
      provider:
        type: string
      authScheme:
        type: string
      credentials:
        type: object
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      id:
        type: number
        format: double
    required:
      - provider
    additionalProperties: false
  x-any:
    properties: {}
  MyUser:
    properties:
      provider:
        type: string
      profile:
        type: object
      audit:
        type: object
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: string
    required:
      - email
    additionalProperties: false
  UserCredential:
    properties:
      provider:
        type: string
      authScheme:
        type: string
      externalId:
        type: string
      profile:
        type: object
      credentials:
        type: object
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      id:
        type: number
        format: double
      userId:
        type: string
    additionalProperties: false
  MyUserIdentity:
    properties:
      provider:
        type: string
      authScheme:
        type: string
      externalId:
        type: string
      profile:
        type: object
      credentials:
        type: object
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      id:
        type: string
      userId:
        type: string
    additionalProperties: false
  CustomAccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: string
      principalType:
        type: string
    required:
      - id
    additionalProperties: false
  Role:
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
    required:
      - name
    additionalProperties: false
  RoleMapping:
    description: Map principals to roles
    properties:
      id:
        type: string
      principalType:
        description: >-
          The principal type, such as USER, APPLICATION, ROLE, or user model
          name in case of multiple user models
        type: string
      principalId:
        type: string
      roleId:
        type: string
    additionalProperties: false
  Group:
    properties:
      audit:
        type: object
      description:
        description: Group Description
        type: string
      members:
        type: object
      ownerId:
        type: string
      placeId:
        type: string
      title:
        description: Group Title
        type: string
      id:
        type: string
    required:
      - ownerId
      - placeId
    additionalProperties: false
  Place:
    properties:
      audit:
        type: object
      description:
        type: string
      floor:
        type: string
      gatewayId:
        type: string
      location:
        type: object
      ownerId:
        type: string
      title:
        type: string
      id:
        type: string
    required:
      - title
    additionalProperties: false
  PlaceArea:
    properties:
      audit:
        type: object
      description:
        type: string
      devices:
        type: object
      floor:
        type: string
      placeId:
        type: string
      title:
        type: string
      type:
        type: string
      sensors:
        type: array
        items:
          $ref: '#/definitions/x-any'
      id:
        type: string
    required:
      - floor
      - placeId
      - title
    additionalProperties: false
  Board:
    properties:
      audit:
        type: object
      config:
        type: object
      connectedToId:
        type: string
      connectedToType:
        type: string
      description:
        type: string
      gatewayId:
        type: string
      mfgDate:
        type: string
        format: date-time
      owner:
        type: object
      placeId:
        type: string
      status:
        type: string
      subType:
        type: string
      title:
        type: string
      type:
        type: string
      uniqueIdentifier:
        type: string
      sensors:
        type: object
      id:
        type: string
    additionalProperties: false
  Configuration:
    properties:
      configurationType:
        type: string
      configuration:
        type: object
      id:
        type: string
    additionalProperties: false
  Scene:
    properties:
      areas:
        type: array
        items:
          $ref: '#/definitions/x-any'
      audit:
        type: object
      description:
        type: string
      lastExecutedTime:
        type: string
        format: date-time
      placeId:
        type: string
      settings:
        type: object
      title:
        type: string
      type:
        description: 'TIME, TEMP, HUM, WATERLEVEL'
        type: string
      status:
        description: ACTIVE | INACTIVE | RUNNING
        type: string
      id:
        type: string
    required:
      - placeId
      - title
    additionalProperties: false
  UserSetting:
    properties:
      audit:
        type: object
      type:
        type: string
      config:
        type: object
      userId:
        type: string
      registrationId:
        type: string
      placeId:
        type: string
      id:
        type: string
    required:
      - type
    additionalProperties: false
  Notification:
    properties:
      email:
        description: 'To, CC, BCC etc'
        type: object
      group:
        description: Notify all members of Group
        type: object
      push:
        type: boolean
      sms:
        type: object
      type:
        description: 'DEVICE, BOARD, PLACE, CAMERA'
        type: string
      typeId:
        type: string
      typeParentId:
        type: string
      typeValue:
        type: string
      userId:
        type: string
      id:
        type: string
    additionalProperties: false
  Device:
    properties:
      audit:
        type: object
      analog:
        type: boolean
      config:
        type: object
      description:
        type: string
      deviceId:
        type: string
      deviceIndex:
        type: number
        format: double
      deviceValue:
        type: number
        format: double
      deviceValueUnits:
        type: string
      parentId:
        type: string
      parentType:
        type: string
      status:
        type: number
        format: double
      title:
        type: string
      type:
        type: string
      id:
        type: string
    required:
      - deviceIndex
    additionalProperties: false
  Conversation:
    properties:
      context:
        type: object
      input:
        type: object
      output:
        type: object
      timestamp:
        type: string
        format: date-time
      intents:
        type: object
      entities:
        type: object
      id:
        type: string
    additionalProperties: false
  Mapping:
    properties:
      key:
        type: string
      output:
        type: object
      audit:
        type: object
      id:
        type: string
    required:
      - key
      - output
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: hbuddy
  version: 1.0.1
  title: hbuddy
  contact:
    name: Gurvinder Singh
    email: sinny777@gmail.com
    url: 'http://www/hukamtechnologies.com'
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  Oauth Definition:
    type: oauth2
    description: ''
    flow: application
    scopes:
      places: ''
    tokenUrl: >-
      https://api.us.apiconnect.ibmcloud.com/sinny777gmailcom-dev/sb/confidential/oauth2/token
  clientSecretHeader:
    type: apiKey
    description: ''
    in: header
    name: X-IBM-Client-Secret
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
security:
  - clientSecretHeader: []
    clientIdHeader: []
  - Oauth Definition:
      - places
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'https://localhost:4001'
        target-url: 'https://hbuddy-dev.mybluemix.net'
  assembly:
    execute:
      - proxy:
          title: proxy
          timeout: 60
          verb: keep
          cache-response: protocol
          cache-ttl: 900
          version: 1.0.0
          tls-profile: 'client:Loopback-client'
          target-url: $(target-url)$(request.path)$(request.search)
    catch: []
  gateway: datapower-gateway
  phase: realized
  properties:
    target-url:
      value: ''
      description: ''
      encoded: false
host: $(catalog.host)
