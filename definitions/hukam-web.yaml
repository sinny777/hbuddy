paths:
  '/userCredentials/{id}/user':
    get:
      tags:
        - userCredential
      summary: Fetches belongsTo relation user.
      operationId: userCredential.prototype.__get__user
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: UserCredential id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /userCredentials:
    post:
      tags:
        - userCredential
      summary: Create a new instance of the model and persist it into the data source.
      operationId: userCredential.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    put:
      tags:
        - userCredential
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: userCredential.upsert__put_userCredentials
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    patch:
      tags:
        - userCredential
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: userCredential.upsert__patch_userCredentials
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    get:
      tags:
        - userCredential
      summary: Find all instances of the model matched by filter from the data source.
      operationId: userCredential.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/userCredential'
      deprecated: false
  /userCredentials/replaceOrCreate:
    post:
      tags:
        - userCredential
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: userCredential.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  /userCredentials/upsertWithWhere:
    post:
      tags:
        - userCredential
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: userCredential.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  '/userCredentials/{id}/exists':
    get:
      tags:
        - userCredential
      summary: Check whether a model instance exists in the data source.
      operationId: 'userCredential.exists__get_userCredentials_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/userCredentials/{id}':
    head:
      tags:
        - userCredential
      summary: Check whether a model instance exists in the data source.
      operationId: 'userCredential.exists__head_userCredentials_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - userCredential
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: userCredential.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    delete:
      tags:
        - userCredential
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: userCredential.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - userCredential
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'userCredential.prototype.updateAttributes__put_userCredentials_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/userCredential'
        - name: id
          in: path
          description: UserCredential id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    patch:
      tags:
        - userCredential
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'userCredential.prototype.updateAttributes__patch_userCredentials_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/userCredential'
        - name: id
          in: path
          description: UserCredential id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  '/userCredentials/{id}/replace':
    post:
      tags:
        - userCredential
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: userCredential.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  /userCredentials/findOne:
    get:
      tags:
        - userCredential
      summary: Find first instance of the model matched by filter from the data source.
      operationId: userCredential.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  /userCredentials/update:
    post:
      tags:
        - userCredential
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: userCredential.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/userCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /userCredentials/count:
    get:
      tags:
        - userCredential
      summary: Count instances of the model matched by where from the data source.
      operationId: userCredential.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/userIdentities/{id}/user':
    get:
      tags:
        - userIdentity
      summary: Fetches belongsTo relation user.
      operationId: userIdentity.prototype.__get__user
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: UserIdentity id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /userIdentities:
    post:
      tags:
        - userIdentity
      summary: Create a new instance of the model and persist it into the data source.
      operationId: userIdentity.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    put:
      tags:
        - userIdentity
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: userIdentity.upsert__put_userIdentities
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    patch:
      tags:
        - userIdentity
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: userIdentity.upsert__patch_userIdentities
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    get:
      tags:
        - userIdentity
      summary: Find all instances of the model matched by filter from the data source.
      operationId: userIdentity.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/userIdentity'
      deprecated: false
  /userIdentities/replaceOrCreate:
    post:
      tags:
        - userIdentity
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: userIdentity.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
  /userIdentities/upsertWithWhere:
    post:
      tags:
        - userIdentity
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: userIdentity.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
  '/userIdentities/{id}/exists':
    get:
      tags:
        - userIdentity
      summary: Check whether a model instance exists in the data source.
      operationId: 'userIdentity.exists__get_userIdentities_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/userIdentities/{id}':
    head:
      tags:
        - userIdentity
      summary: Check whether a model instance exists in the data source.
      operationId: 'userIdentity.exists__head_userIdentities_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - userIdentity
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: userIdentity.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    delete:
      tags:
        - userIdentity
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: userIdentity.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - userIdentity
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'userIdentity.prototype.updateAttributes__put_userIdentities_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/userIdentity'
        - name: id
          in: path
          description: UserIdentity id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    patch:
      tags:
        - userIdentity
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'userIdentity.prototype.updateAttributes__patch_userIdentities_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/userIdentity'
        - name: id
          in: path
          description: UserIdentity id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
  '/userIdentities/{id}/replace':
    post:
      tags:
        - userIdentity
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: userIdentity.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
  /userIdentities/findOne:
    get:
      tags:
        - userIdentity
      summary: Find first instance of the model matched by filter from the data source.
      operationId: userIdentity.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
  /userIdentities/update:
    post:
      tags:
        - userIdentity
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: userIdentity.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/userIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /userIdentities/count:
    get:
      tags:
        - userIdentity
      summary: Count instances of the model matched by where from the data source.
      operationId: userIdentity.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/AccessTokens/{id}/user':
    get:
      tags:
        - AccessToken
      summary: Fetches belongsTo relation user.
      operationId: AccessToken.prototype.__get__user
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /AccessTokens:
    post:
      tags:
        - AccessToken
      summary: Create a new instance of the model and persist it into the data source.
      operationId: AccessToken.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    put:
      tags:
        - AccessToken
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: AccessToken.upsert__put_AccessTokens
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    patch:
      tags:
        - AccessToken
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: AccessToken.upsert__patch_AccessTokens
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    get:
      tags:
        - AccessToken
      summary: Find all instances of the model matched by filter from the data source.
      operationId: AccessToken.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
  /AccessTokens/replaceOrCreate:
    post:
      tags:
        - AccessToken
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: AccessToken.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  /AccessTokens/upsertWithWhere:
    post:
      tags:
        - AccessToken
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: AccessToken.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/AccessTokens/{id}/exists':
    get:
      tags:
        - AccessToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'AccessToken.exists__get_AccessTokens_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/AccessTokens/{id}':
    head:
      tags:
        - AccessToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'AccessToken.exists__head_AccessTokens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - AccessToken
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: AccessToken.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - AccessToken
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: AccessToken.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - AccessToken
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'AccessToken.prototype.updateAttributes__put_AccessTokens_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    patch:
      tags:
        - AccessToken
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'AccessToken.prototype.updateAttributes__patch_AccessTokens_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/AccessTokens/{id}/replace':
    post:
      tags:
        - AccessToken
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: AccessToken.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  /AccessTokens/findOne:
    get:
      tags:
        - AccessToken
      summary: Find first instance of the model matched by filter from the data source.
      operationId: AccessToken.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  /AccessTokens/update:
    post:
      tags:
        - AccessToken
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: AccessToken.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /AccessTokens/count:
    get:
      tags:
        - AccessToken
      summary: Count instances of the model matched by where from the data source.
      operationId: AccessToken.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ACLs:
    post:
      tags:
        - ACL
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ACL.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    put:
      tags:
        - ACL
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: ACL.upsert__put_ACLs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    patch:
      tags:
        - ACL
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: ACL.upsert__patch_ACLs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    get:
      tags:
        - ACL
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ACL.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ACL'
      deprecated: false
  /ACLs/replaceOrCreate:
    post:
      tags:
        - ACL
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: ACL.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  /ACLs/upsertWithWhere:
    post:
      tags:
        - ACL
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: ACL.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  '/ACLs/{id}/exists':
    get:
      tags:
        - ACL
      summary: Check whether a model instance exists in the data source.
      operationId: 'ACL.exists__get_ACLs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ACLs/{id}':
    head:
      tags:
        - ACL
      summary: Check whether a model instance exists in the data source.
      operationId: 'ACL.exists__head_ACLs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ACL
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ACL.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    delete:
      tags:
        - ACL
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ACL.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - ACL
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'ACL.prototype.updateAttributes__put_ACLs_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ACL'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
    patch:
      tags:
        - ACL
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'ACL.prototype.updateAttributes__patch_ACLs_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ACL'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  '/ACLs/{id}/replace':
    post:
      tags:
        - ACL
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: ACL.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  /ACLs/findOne:
    get:
      tags:
        - ACL
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ACL.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ACL'
      deprecated: false
  /ACLs/update:
    post:
      tags:
        - ACL
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ACL.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ACL'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ACLs/count:
    get:
      tags:
        - ACL
      summary: Count instances of the model matched by where from the data source.
      operationId: ACL.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/RoleMappings/{id}/role':
    get:
      tags:
        - RoleMapping
      summary: Fetches belongsTo relation role.
      operationId: RoleMapping.prototype.__get__role
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /RoleMappings:
    post:
      tags:
        - RoleMapping
      summary: Create a new instance of the model and persist it into the data source.
      operationId: RoleMapping.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    put:
      tags:
        - RoleMapping
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: RoleMapping.upsert__put_RoleMappings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    patch:
      tags:
        - RoleMapping
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: RoleMapping.upsert__patch_RoleMappings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    get:
      tags:
        - RoleMapping
      summary: Find all instances of the model matched by filter from the data source.
      operationId: RoleMapping.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/RoleMapping'
      deprecated: false
  /RoleMappings/replaceOrCreate:
    post:
      tags:
        - RoleMapping
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: RoleMapping.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  /RoleMappings/upsertWithWhere:
    post:
      tags:
        - RoleMapping
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: RoleMapping.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  '/RoleMappings/{id}/exists':
    get:
      tags:
        - RoleMapping
      summary: Check whether a model instance exists in the data source.
      operationId: 'RoleMapping.exists__get_RoleMappings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/RoleMappings/{id}':
    head:
      tags:
        - RoleMapping
      summary: Check whether a model instance exists in the data source.
      operationId: 'RoleMapping.exists__head_RoleMappings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - RoleMapping
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: RoleMapping.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - RoleMapping
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: RoleMapping.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - RoleMapping
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'RoleMapping.prototype.updateAttributes__put_RoleMappings_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    patch:
      tags:
        - RoleMapping
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'RoleMapping.prototype.updateAttributes__patch_RoleMappings_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  '/RoleMappings/{id}/replace':
    post:
      tags:
        - RoleMapping
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: RoleMapping.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  /RoleMappings/findOne:
    get:
      tags:
        - RoleMapping
      summary: Find first instance of the model matched by filter from the data source.
      operationId: RoleMapping.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  /RoleMappings/update:
    post:
      tags:
        - RoleMapping
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: RoleMapping.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /RoleMappings/count:
    get:
      tags:
        - RoleMapping
      summary: Count instances of the model matched by where from the data source.
      operationId: RoleMapping.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Roles/{id}/principals/{fk}':
    get:
      tags:
        - Role
      summary: Find a related item by id for principals.
      operationId: Role.prototype.__findById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - Role
      summary: Delete a related item by id for principals.
      operationId: Role.prototype.__destroyById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Role
      summary: Update a related item by id for principals.
      operationId: Role.prototype.__updateById__principals
      parameters:
        - name: fk
          in: path
          description: Foreign key for principals
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
  '/Roles/{id}/principals':
    get:
      tags:
        - Role
      summary: Queries principals of Role.
      operationId: Role.prototype.__get__principals
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/RoleMapping'
      deprecated: false
    post:
      tags:
        - Role
      summary: Creates a new instance in principals of this model.
      operationId: Role.prototype.__create__principals
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - Role
      summary: Deletes all principals of this model.
      operationId: Role.prototype.__delete__principals
      parameters:
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Roles/{id}/principals/count':
    get:
      tags:
        - Role
      summary: Counts principals of Role.
      operationId: Role.prototype.__count__principals
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Roles:
    post:
      tags:
        - Role
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Role.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    put:
      tags:
        - Role
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Role.upsert__put_Roles
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    patch:
      tags:
        - Role
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Role.upsert__patch_Roles
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    get:
      tags:
        - Role
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Role.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
      deprecated: false
  /Roles/replaceOrCreate:
    post:
      tags:
        - Role
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Role.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /Roles/upsertWithWhere:
    post:
      tags:
        - Role
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Role.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  '/Roles/{id}/exists':
    get:
      tags:
        - Role
      summary: Check whether a model instance exists in the data source.
      operationId: 'Role.exists__get_Roles_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Roles/{id}':
    head:
      tags:
        - Role
      summary: Check whether a model instance exists in the data source.
      operationId: 'Role.exists__head_Roles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Role
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Role.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - Role
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Role.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Role
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Role.prototype.updateAttributes__put_Roles_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Role'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    patch:
      tags:
        - Role
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Role.prototype.updateAttributes__patch_Roles_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Role'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  '/Roles/{id}/replace':
    post:
      tags:
        - Role
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Role.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /Roles/findOne:
    get:
      tags:
        - Role
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Role.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  /Roles/update:
    post:
      tags:
        - Role
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Role.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Roles/count:
    get:
      tags:
        - Role
      summary: Count instances of the model matched by where from the data source.
      operationId: Role.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/MyUsers/{id}/accessTokens/{fk}':
    get:
      tags:
        - MyUser
      summary: Find a related item by id for accessTokens.
      operationId: MyUser.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Delete a related item by id for accessTokens.
      operationId: MyUser.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update a related item by id for accessTokens.
      operationId: MyUser.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/MyUsers/{id}/identities':
    get:
      tags:
        - MyUser
      summary: Fetches hasOne relation identities.
      operationId: MyUser.prototype.__get__identities
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in identities of this model.
      operationId: MyUser.prototype.__create__identities
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/userIdentity'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update identities of this model.
      operationId: MyUser.prototype.__update__identities
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/userIdentity'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userIdentity'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes identities of this model.
      operationId: MyUser.prototype.__destroy__identities
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/credentials/{fk}':
    get:
      tags:
        - MyUser
      summary: Find a related item by id for credentials.
      operationId: MyUser.prototype.__findById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Delete a related item by id for credentials.
      operationId: MyUser.prototype.__destroyById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update a related item by id for credentials.
      operationId: MyUser.prototype.__updateById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/userCredential'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
  '/MyUsers/{id}/roles/{fk}':
    get:
      tags:
        - MyUser
      summary: Find a related item by id for roles.
      operationId: MyUser.prototype.__findById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Delete a related item by id for roles.
      operationId: MyUser.prototype.__destroyById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - MyUser
      summary: Update a related item by id for roles.
      operationId: MyUser.prototype.__updateById__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Role'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  '/MyUsers/{id}/roles/rel/{fk}':
    put:
      tags:
        - MyUser
      summary: Add a related item by id for roles.
      operationId: MyUser.prototype.__link__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Remove the roles relation to an item by id.
      operationId: MyUser.prototype.__unlink__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - MyUser
      summary: Check the existence of roles relation to an item by id.
      operationId: MyUser.prototype.__exists__roles
      parameters:
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/MyUsers/{id}/accessTokens':
    get:
      tags:
        - MyUser
      summary: Queries accessTokens of MyUser.
      operationId: MyUser.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in accessTokens of this model.
      operationId: MyUser.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes all accessTokens of this model.
      operationId: MyUser.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/accessTokens/count':
    get:
      tags:
        - MyUser
      summary: Counts accessTokens of MyUser.
      operationId: MyUser.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/MyUsers/{id}/credentials':
    get:
      tags:
        - MyUser
      summary: Queries credentials of MyUser.
      operationId: MyUser.prototype.__get__credentials
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/userCredential'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in credentials of this model.
      operationId: MyUser.prototype.__create__credentials
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/userCredential'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/userCredential'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes all credentials of this model.
      operationId: MyUser.prototype.__delete__credentials
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/credentials/count':
    get:
      tags:
        - MyUser
      summary: Counts credentials of MyUser.
      operationId: MyUser.prototype.__count__credentials
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/MyUsers/{id}/roles':
    get:
      tags:
        - MyUser
      summary: Queries roles of MyUser.
      operationId: MyUser.prototype.__get__roles
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
      deprecated: false
    post:
      tags:
        - MyUser
      summary: Creates a new instance in roles of this model.
      operationId: MyUser.prototype.__create__roles
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Role'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: Deletes all roles of this model.
      operationId: MyUser.prototype.__delete__roles
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/MyUsers/{id}/roles/count':
    get:
      tags:
        - MyUser
      summary: Counts roles of MyUser.
      operationId: MyUser.prototype.__count__roles
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /MyUsers:
    post:
      tags:
        - MyUser
      summary: Create a new instance of the model and persist it into the data source.
      operationId: MyUser.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    put:
      tags:
        - MyUser
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: MyUser.upsert__put_MyUsers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    patch:
      tags:
        - MyUser
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: MyUser.upsert__patch_MyUsers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    get:
      tags:
        - MyUser
      summary: Find all instances of the model matched by filter from the data source.
      operationId: MyUser.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/MyUser'
      deprecated: false
  /MyUsers/replaceOrCreate:
    post:
      tags:
        - MyUser
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: MyUser.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /MyUsers/upsertWithWhere:
    post:
      tags:
        - MyUser
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: MyUser.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  '/MyUsers/{id}/exists':
    get:
      tags:
        - MyUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'MyUser.exists__get_MyUsers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/MyUsers/{id}':
    head:
      tags:
        - MyUser
      summary: Check whether a model instance exists in the data source.
      operationId: 'MyUser.exists__head_MyUsers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - MyUser
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: MyUser.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    delete:
      tags:
        - MyUser
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: MyUser.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - MyUser
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'MyUser.prototype.updateAttributes__put_MyUsers_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MyUser'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
    patch:
      tags:
        - MyUser
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'MyUser.prototype.updateAttributes__patch_MyUsers_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MyUser'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  '/MyUsers/{id}/replace':
    post:
      tags:
        - MyUser
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: MyUser.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /MyUsers/findOne:
    get:
      tags:
        - MyUser
      summary: Find first instance of the model matched by filter from the data source.
      operationId: MyUser.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  /MyUsers/update:
    post:
      tags:
        - MyUser
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: MyUser.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/MyUser'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /MyUsers/count:
    get:
      tags:
        - MyUser
      summary: Count instances of the model matched by where from the data source.
      operationId: MyUser.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /MyUsers/login:
    post:
      tags:
        - MyUser
      summary: Login a user with username/email and password.
      operationId: MyUser.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /MyUsers/logout:
    post:
      tags:
        - MyUser
      summary: Logout a user with access token.
      operationId: MyUser.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/confirm:
    get:
      tags:
        - MyUser
      summary: Confirm a user registration with email verification token.
      operationId: MyUser.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/reset:
    post:
      tags:
        - MyUser
      summary: Reset password for a user with email.
      operationId: MyUser.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /MyUsers/authenticate:
    get:
      tags:
        - MyUser
      operationId: MyUser.authenticate
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              user:
                type: object
      deprecated: false
  '/Places/{id}/owner':
    get:
      tags:
        - Place
      summary: Fetches belongsTo relation owner.
      operationId: Place.prototype.__get__owner
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  '/Places/{id}/groups/{fk}':
    get:
      tags:
        - Place
      summary: Find a related item by id for groups.
      operationId: Place.prototype.__findById__groups
      parameters:
        - name: fk
          in: path
          description: Foreign key for groups
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    delete:
      tags:
        - Place
      summary: Delete a related item by id for groups.
      operationId: Place.prototype.__destroyById__groups
      parameters:
        - name: fk
          in: path
          description: Foreign key for groups
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Place
      summary: Update a related item by id for groups.
      operationId: Place.prototype.__updateById__groups
      parameters:
        - name: fk
          in: path
          description: Foreign key for groups
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Group'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  '/Places/{id}/groups':
    get:
      tags:
        - Place
      summary: Queries groups of Place.
      operationId: Place.prototype.__get__groups
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
      deprecated: false
    post:
      tags:
        - Place
      summary: Creates a new instance in groups of this model.
      operationId: Place.prototype.__create__groups
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Group'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    delete:
      tags:
        - Place
      summary: Deletes all groups of this model.
      operationId: Place.prototype.__delete__groups
      parameters:
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Places/{id}/groups/count':
    get:
      tags:
        - Place
      summary: Counts groups of Place.
      operationId: Place.prototype.__count__groups
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Places:
    post:
      tags:
        - Place
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Place.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
    put:
      tags:
        - Place
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Place.upsert__put_Places
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
    patch:
      tags:
        - Place
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Place.upsert__patch_Places
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
    get:
      tags:
        - Place
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Place.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Place'
      deprecated: false
  /Places/replaceOrCreate:
    post:
      tags:
        - Place
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Place.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  /Places/upsertWithWhere:
    post:
      tags:
        - Place
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Place.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  '/Places/{id}/exists':
    get:
      tags:
        - Place
      summary: Check whether a model instance exists in the data source.
      operationId: 'Place.exists__get_Places_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Places/{id}':
    head:
      tags:
        - Place
      summary: Check whether a model instance exists in the data source.
      operationId: 'Place.exists__head_Places_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Place
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Place.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
    delete:
      tags:
        - Place
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Place.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Place
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Place.prototype.updateAttributes__put_Places_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Place'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
    patch:
      tags:
        - Place
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Place.prototype.updateAttributes__patch_Places_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Place'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  '/Places/{id}/replace':
    post:
      tags:
        - Place
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Place.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  /Places/findOne:
    get:
      tags:
        - Place
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Place.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  /Places/update:
    post:
      tags:
        - Place
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Place.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Place'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Places/count:
    get:
      tags:
        - Place
      summary: Count instances of the model matched by where from the data source.
      operationId: Place.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Places/sensordata:
    post:
      tags:
        - Place
      operationId: Place.sensorData
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              sensordata:
                type: object
      deprecated: false
  /PlaceAreas:
    post:
      tags:
        - PlaceArea
      summary: Create a new instance of the model and persist it into the data source.
      operationId: PlaceArea.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
    put:
      tags:
        - PlaceArea
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: PlaceArea.upsert__put_PlaceAreas
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
    patch:
      tags:
        - PlaceArea
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: PlaceArea.upsert__patch_PlaceAreas
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
    get:
      tags:
        - PlaceArea
      summary: Find all instances of the model matched by filter from the data source.
      operationId: PlaceArea.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/PlaceArea'
      deprecated: false
  /PlaceAreas/replaceOrCreate:
    post:
      tags:
        - PlaceArea
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: PlaceArea.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
  /PlaceAreas/upsertWithWhere:
    post:
      tags:
        - PlaceArea
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: PlaceArea.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
  '/PlaceAreas/{id}/exists':
    get:
      tags:
        - PlaceArea
      summary: Check whether a model instance exists in the data source.
      operationId: 'PlaceArea.exists__get_PlaceAreas_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/PlaceAreas/{id}':
    head:
      tags:
        - PlaceArea
      summary: Check whether a model instance exists in the data source.
      operationId: 'PlaceArea.exists__head_PlaceAreas_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - PlaceArea
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: PlaceArea.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
    delete:
      tags:
        - PlaceArea
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: PlaceArea.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - PlaceArea
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'PlaceArea.prototype.updateAttributes__put_PlaceAreas_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PlaceArea'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
    patch:
      tags:
        - PlaceArea
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'PlaceArea.prototype.updateAttributes__patch_PlaceAreas_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PlaceArea'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
  '/PlaceAreas/{id}/replace':
    post:
      tags:
        - PlaceArea
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: PlaceArea.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
  /PlaceAreas/findOne:
    get:
      tags:
        - PlaceArea
      summary: Find first instance of the model matched by filter from the data source.
      operationId: PlaceArea.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PlaceArea'
      deprecated: false
  /PlaceAreas/update:
    post:
      tags:
        - PlaceArea
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: PlaceArea.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PlaceArea'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /PlaceAreas/count:
    get:
      tags:
        - PlaceArea
      summary: Count instances of the model matched by where from the data source.
      operationId: PlaceArea.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /PlaceAreas/addboard:
    post:
      tags:
        - PlaceArea
      operationId: PlaceArea.addBoard
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              board:
                type: object
      deprecated: false
  /Boards:
    post:
      tags:
        - Board
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Board.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
    put:
      tags:
        - Board
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Board.upsert__put_Boards
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
    patch:
      tags:
        - Board
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Board.upsert__patch_Boards
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
    get:
      tags:
        - Board
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Board.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Board'
      deprecated: false
  /Boards/replaceOrCreate:
    post:
      tags:
        - Board
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Board.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
  /Boards/upsertWithWhere:
    post:
      tags:
        - Board
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Board.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
  '/Boards/{id}/exists':
    get:
      tags:
        - Board
      summary: Check whether a model instance exists in the data source.
      operationId: 'Board.exists__get_Boards_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Boards/{id}':
    head:
      tags:
        - Board
      summary: Check whether a model instance exists in the data source.
      operationId: 'Board.exists__head_Boards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Board
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Board.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
    delete:
      tags:
        - Board
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Board.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Board
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Board.prototype.updateAttributes__put_Boards_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Board'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
    patch:
      tags:
        - Board
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Board.prototype.updateAttributes__patch_Boards_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Board'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
  '/Boards/{id}/replace':
    post:
      tags:
        - Board
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Board.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
  /Boards/findOne:
    get:
      tags:
        - Board
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Board.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Board'
      deprecated: false
  /Boards/update:
    post:
      tags:
        - Board
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Board.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Board'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Boards/count:
    get:
      tags:
        - Board
      summary: Count instances of the model matched by where from the data source.
      operationId: Board.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Boards/devicechange:
    post:
      tags:
        - Board
      operationId: Board.deviceChangeTrigger
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Boards/sensordata:
    post:
      tags:
        - Board
      operationId: Board.sensorDataTrigger
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Groups/{id}/owner':
    get:
      tags:
        - Group
      summary: Fetches belongsTo relation owner.
      operationId: Group.prototype.__get__owner
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/MyUser'
      deprecated: false
  '/Groups/{id}/place':
    get:
      tags:
        - Group
      summary: Fetches belongsTo relation place.
      operationId: Group.prototype.__get__place
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Place'
      deprecated: false
  /Groups:
    post:
      tags:
        - Group
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Group.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    put:
      tags:
        - Group
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Group.upsert__put_Groups
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    patch:
      tags:
        - Group
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Group.upsert__patch_Groups
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    get:
      tags:
        - Group
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Group.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
      deprecated: false
  /Groups/replaceOrCreate:
    post:
      tags:
        - Group
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Group.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  /Groups/upsertWithWhere:
    post:
      tags:
        - Group
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Group.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  '/Groups/{id}/exists':
    get:
      tags:
        - Group
      summary: Check whether a model instance exists in the data source.
      operationId: 'Group.exists__get_Groups_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Groups/{id}':
    head:
      tags:
        - Group
      summary: Check whether a model instance exists in the data source.
      operationId: 'Group.exists__head_Groups_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Group
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Group.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    delete:
      tags:
        - Group
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Group.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Group
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Group.prototype.updateAttributes__put_Groups_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Group'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    patch:
      tags:
        - Group
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Group.prototype.updateAttributes__patch_Groups_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Group'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  '/Groups/{id}/replace':
    post:
      tags:
        - Group
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Group.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  /Groups/findOne:
    get:
      tags:
        - Group
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Group.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  /Groups/update:
    post:
      tags:
        - Group
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Group.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Groups/count:
    get:
      tags:
        - Group
      summary: Count instances of the model matched by where from the data source.
      operationId: Group.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Configurations:
    post:
      tags:
        - Configuration
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Configuration.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    put:
      tags:
        - Configuration
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Configuration.upsert__put_Configurations
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    patch:
      tags:
        - Configuration
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Configuration.upsert__patch_Configurations
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    get:
      tags:
        - Configuration
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Configuration.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Configuration'
      deprecated: false
  /Configurations/replaceOrCreate:
    post:
      tags:
        - Configuration
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Configuration.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  /Configurations/upsertWithWhere:
    post:
      tags:
        - Configuration
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Configuration.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  '/Configurations/{id}/exists':
    get:
      tags:
        - Configuration
      summary: Check whether a model instance exists in the data source.
      operationId: 'Configuration.exists__get_Configurations_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Configurations/{id}':
    head:
      tags:
        - Configuration
      summary: Check whether a model instance exists in the data source.
      operationId: 'Configuration.exists__head_Configurations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Configuration
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Configuration.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    delete:
      tags:
        - Configuration
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Configuration.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Configuration
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Configuration.prototype.updateAttributes__put_Configurations_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Configuration'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
    patch:
      tags:
        - Configuration
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Configuration.prototype.updateAttributes__patch_Configurations_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Configuration'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  '/Configurations/{id}/replace':
    post:
      tags:
        - Configuration
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Configuration.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  /Configurations/findOne:
    get:
      tags:
        - Configuration
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Configuration.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Configuration'
      deprecated: false
  /Configurations/update:
    post:
      tags:
        - Configuration
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Configuration.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Configuration'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Configurations/count:
    get:
      tags:
        - Configuration
      summary: Count instances of the model matched by where from the data source.
      operationId: Configuration.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Scenes:
    post:
      tags:
        - Scene
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Scene.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
    put:
      tags:
        - Scene
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Scene.upsert__put_Scenes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
    patch:
      tags:
        - Scene
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Scene.upsert__patch_Scenes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
    get:
      tags:
        - Scene
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Scene.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Scene'
      deprecated: false
  /Scenes/replaceOrCreate:
    post:
      tags:
        - Scene
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Scene.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
  /Scenes/upsertWithWhere:
    post:
      tags:
        - Scene
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Scene.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
  '/Scenes/{id}/exists':
    get:
      tags:
        - Scene
      summary: Check whether a model instance exists in the data source.
      operationId: 'Scene.exists__get_Scenes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Scenes/{id}':
    head:
      tags:
        - Scene
      summary: Check whether a model instance exists in the data source.
      operationId: 'Scene.exists__head_Scenes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Scene
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Scene.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
    delete:
      tags:
        - Scene
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Scene.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Scene
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Scene.prototype.updateAttributes__put_Scenes_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Scene'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
    patch:
      tags:
        - Scene
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Scene.prototype.updateAttributes__patch_Scenes_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Scene'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
  '/Scenes/{id}/replace':
    post:
      tags:
        - Scene
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Scene.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
  /Scenes/findOne:
    get:
      tags:
        - Scene
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Scene.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Scene'
      deprecated: false
  /Scenes/update:
    post:
      tags:
        - Scene
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Scene.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Scene'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Scenes/count:
    get:
      tags:
        - Scene
      summary: Count instances of the model matched by where from the data source.
      operationId: Scene.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /UserSettings:
    post:
      tags:
        - UserSetting
      summary: Create a new instance of the model and persist it into the data source.
      operationId: UserSetting.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    put:
      tags:
        - UserSetting
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: UserSetting.upsert__put_UserSettings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    patch:
      tags:
        - UserSetting
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: UserSetting.upsert__patch_UserSettings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    get:
      tags:
        - UserSetting
      summary: Find all instances of the model matched by filter from the data source.
      operationId: UserSetting.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSetting'
      deprecated: false
  /UserSettings/replaceOrCreate:
    post:
      tags:
        - UserSetting
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UserSetting.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  /UserSettings/upsertWithWhere:
    post:
      tags:
        - UserSetting
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: UserSetting.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  '/UserSettings/{id}/exists':
    get:
      tags:
        - UserSetting
      summary: Check whether a model instance exists in the data source.
      operationId: 'UserSetting.exists__get_UserSettings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/UserSettings/{id}':
    head:
      tags:
        - UserSetting
      summary: Check whether a model instance exists in the data source.
      operationId: 'UserSetting.exists__head_UserSettings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - UserSetting
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: UserSetting.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    delete:
      tags:
        - UserSetting
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: UserSetting.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - UserSetting
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'UserSetting.prototype.updateAttributes__put_UserSettings_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserSetting'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
    patch:
      tags:
        - UserSetting
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'UserSetting.prototype.updateAttributes__patch_UserSettings_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserSetting'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  '/UserSettings/{id}/replace':
    post:
      tags:
        - UserSetting
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: UserSetting.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  /UserSettings/findOne:
    get:
      tags:
        - UserSetting
      summary: Find first instance of the model matched by filter from the data source.
      operationId: UserSetting.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserSetting'
      deprecated: false
  /UserSettings/update:
    post:
      tags:
        - UserSetting
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: UserSetting.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserSetting'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /UserSettings/count:
    get:
      tags:
        - UserSetting
      summary: Count instances of the model matched by where from the data source.
      operationId: UserSetting.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Notifications:
    post:
      tags:
        - Notification
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Notification.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    put:
      tags:
        - Notification
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Notification.upsert__put_Notifications
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    patch:
      tags:
        - Notification
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Notification.upsert__patch_Notifications
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    get:
      tags:
        - Notification
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Notification.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Notification'
      deprecated: false
  /Notifications/replaceOrCreate:
    post:
      tags:
        - Notification
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Notification.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  /Notifications/upsertWithWhere:
    post:
      tags:
        - Notification
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Notification.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  '/Notifications/{id}/exists':
    get:
      tags:
        - Notification
      summary: Check whether a model instance exists in the data source.
      operationId: 'Notification.exists__get_Notifications_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Notifications/{id}':
    head:
      tags:
        - Notification
      summary: Check whether a model instance exists in the data source.
      operationId: 'Notification.exists__head_Notifications_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Notification
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Notification.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    delete:
      tags:
        - Notification
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Notification.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Notification
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Notification.prototype.updateAttributes__put_Notifications_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Notification'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    patch:
      tags:
        - Notification
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Notification.prototype.updateAttributes__patch_Notifications_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Notification'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  '/Notifications/{id}/replace':
    post:
      tags:
        - Notification
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Notification.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  /Notifications/findOne:
    get:
      tags:
        - Notification
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Notification.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  /Notifications/update:
    post:
      tags:
        - Notification
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Notification.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Notifications/count:
    get:
      tags:
        - Notification
      summary: Count instances of the model matched by where from the data source.
      operationId: Notification.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Conversations:
    post:
      tags:
        - Conversation
      operationId: Conversation.doconversation
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              conversation:
                type: object
      deprecated: false
  /Devices:
    post:
      tags:
        - Device
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Device.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
    put:
      tags:
        - Device
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Device.upsert__put_Devices
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
    patch:
      tags:
        - Device
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Device.upsert__patch_Devices
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
    get:
      tags:
        - Device
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Device.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Device'
      deprecated: false
  /Devices/replaceOrCreate:
    post:
      tags:
        - Device
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Device.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
  /Devices/upsertWithWhere:
    post:
      tags:
        - Device
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Device.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
  '/Devices/{id}/exists':
    get:
      tags:
        - Device
      summary: Check whether a model instance exists in the data source.
      operationId: 'Device.exists__get_Devices_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Devices/{id}':
    head:
      tags:
        - Device
      summary: Check whether a model instance exists in the data source.
      operationId: 'Device.exists__head_Devices_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Device
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Device.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
    delete:
      tags:
        - Device
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Device.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Device
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Device.prototype.updateAttributes__put_Devices_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Device'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
    patch:
      tags:
        - Device
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Device.prototype.updateAttributes__patch_Devices_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Device'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
  '/Devices/{id}/replace':
    post:
      tags:
        - Device
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Device.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
  /Devices/findOne:
    get:
      tags:
        - Device
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Device.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Device'
      deprecated: false
  /Devices/update:
    post:
      tags:
        - Device
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Device.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Device'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Devices/count:
    get:
      tags:
        - Device
      summary: Count instances of the model matched by where from the data source.
      operationId: Device.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  x-any:
    properties: {}
  MyUser:
    properties:
      provider:
        type: string
      profile:
        type: object
      audit:
        type: object
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date
      lastUpdated:
        type: string
        format: date
      id:
        type: string
    required:
      - email
    additionalProperties: false
  userCredential:
    properties:
      provider:
        type: string
      authScheme:
        type: string
      externalId:
        type: string
      profile:
        type: object
      credentials:
        type: object
      created:
        type: string
        format: date
      modified:
        type: string
        format: date
      id:
        type: number
        format: double
      userId:
        type: string
    additionalProperties: false
  userIdentity:
    properties:
      provider:
        type: string
      authScheme:
        type: string
      externalId:
        type: string
      profile:
        type: object
      credentials:
        type: object
      created:
        type: string
        format: date
      modified:
        type: string
        format: date
      id:
        type: number
        format: double
      userId:
        type: string
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date
      lastUpdated:
        type: string
        format: date
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      created:
        type: string
        format: date
      userId:
        type: string
    required:
      - id
    additionalProperties: false
  ACL:
    properties:
      model:
        description: The name of the model
        type: string
      property:
        description: 'The name of the property, method, scope, or relation'
        type: string
      accessType:
        type: string
      permission:
        type: string
      principalType:
        type: string
      principalId:
        type: string
      id:
        type: string
    additionalProperties: false
  Role:
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      created:
        type: string
        format: date
      modified:
        type: string
        format: date
    required:
      - name
    additionalProperties: false
  RoleMapping:
    description: Map principals to roles
    properties:
      id:
        type: string
      principalType:
        description: 'The principal type, such as user, application, or role'
        type: string
      principalId:
        type: string
      roleId:
        type: string
    additionalProperties: false
  Group:
    properties:
      audit:
        type: object
      description:
        description: Group Description
        type: string
      members:
        type: object
      ownerId:
        type: string
      placeId:
        type: string
      title:
        description: Group Title
        type: string
      id:
        type: string
    required:
      - ownerId
      - placeId
    additionalProperties: false
  Place:
    properties:
      audit:
        type: object
      description:
        type: string
      floor:
        type: string
      gatewayId:
        type: string
      location:
        type: object
      ownerId:
        type: string
      title:
        type: string
      id:
        type: string
    required:
      - title
    additionalProperties: false
  PlaceArea:
    properties:
      audit:
        type: object
      description:
        type: string
      devices:
        type: object
      floor:
        type: string
      placeId:
        type: string
      title:
        type: string
      type:
        type: string
      sensors:
        $ref: '#/definitions/x-any'
      id:
        type: string
    required:
      - floor
      - placeId
      - title
    additionalProperties: false
  Board:
    properties:
      audit:
        type: object
      description:
        type: string
      devices:
        type: object
      gatewayId:
        type: string
      mfgDate:
        type: string
        format: date
      owner:
        type: object
      status:
        type: string
      subType:
        type: string
      title:
        type: string
      type:
        type: string
      uniqueIdentifier:
        type: string
      connectedToType:
        type: string
      connectedToId:
        type: string
      id:
        type: string
    required:
      - uniqueIdentifier
    additionalProperties: false
  Configuration:
    properties:
      configurationType:
        type: string
      configuration:
        type: object
      id:
        type: string
    additionalProperties: false
  Scene:
    properties:
      areas:
        $ref: '#/definitions/x-any'
      audit:
        type: object
      description:
        type: string
      lastExecutedTime:
        type: string
        format: date
      placeId:
        type: string
      settings:
        type: object
      title:
        type: string
      type:
        description: 'TIME, TEMP, HUM, WATERLEVEL'
        type: string
      status:
        description: ACTIVE | INACTIVE | RUNNING
        type: string
      id:
        type: string
    required:
      - placeId
      - title
    additionalProperties: false
  UserSetting:
    properties:
      notify:
        type: string
      userId:
        type: string
      registrationId:
        type: string
      placeId:
        type: string
      timestamp:
        type: string
        format: date
      id:
        type: string
    additionalProperties: false
  Notification:
    properties:
      email:
        description: 'To, CC, BCC etc'
        type: object
      group:
        description: Notify all members of Group
        type: object
      push:
        type: boolean
      sms:
        type: object
      type:
        description: 'DEVICE, BOARD, PLACE'
        type: string
      typeId:
        type: string
      typeParentId:
        type: string
      typeValue:
        $ref: '#/definitions/x-any'
      userId:
        type: string
      id:
        type: string
    additionalProperties: false
  Device:
    properties:
      deviceId:
        description: Unique Identification for IoT platform
        type: string
      deviceInfo:
        type: object
      location:
        type: object
      metadata:
        type: object
      registration:
        type: object
      status:
        type: object
      clientId:
        type: string
      typeId:
        type: string
      id:
        type: string
    required:
      - deviceId
      - typeId
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: hukam-web
  version: 1.0.0
  title: hukam-web
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  gateway: datapower-gateway
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
        app-server: 'https://hukam-web.mybluemix.net'
  assembly:
    execute:
      - invoke:
          target-url: $(app-server)$(request.path)$(request.search)
  properties:
    app-server:
      value: 'https://hukam-web.mybluemix.net'
      description: ''
      encoded: false
